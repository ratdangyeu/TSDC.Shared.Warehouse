// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TSDC.Core.Domain.Warehouse;

#nullable disable

namespace TSDC.Core.Domain.Warehouse.Migrations
{
    [DbContext(typeof(WarehouseContext))]
    partial class WarehouseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TSDC.Core.Domain.Warehouse.BeginningWarehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<string>("UnitName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UnitId");

                    b.HasIndex("WarehouseId");

                    b.HasIndex("WarehouseItemId");

                    b.ToTable("BeginningWarehouse");
                });

            modelBuilder.Entity("TSDC.Core.Domain.Warehouse.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<string>("UnitName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Unit");
                });

            modelBuilder.Entity("TSDC.Core.Domain.Warehouse.Vendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Vendor");
                });

            modelBuilder.Entity("TSDC.Core.Domain.Warehouse.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Warehouse");
                });

            modelBuilder.Entity("TSDC.Core.Domain.Warehouse.WarehouseBalance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WarehouseId");

                    b.HasIndex("WarehouseItemId");

                    b.ToTable("WarehouseBalance");
                });

            modelBuilder.Entity("TSDC.Core.Domain.Warehouse.WarehouseItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int");

                    b.Property<string>("VendorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WarehouseItemCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UnitId");

                    b.HasIndex("VendorId");

                    b.HasIndex("WarehouseItemCategoryId");

                    b.ToTable("WarehouseItem");
                });

            modelBuilder.Entity("TSDC.Core.Domain.Warehouse.WarehouseItemCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WarehouseItemCategory");
                });

            modelBuilder.Entity("TSDC.Core.Domain.Warehouse.WarehouseItemUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ConvertRate")
                        .HasColumnType("int");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<string>("UnitName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WarehouseItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UnitId");

                    b.HasIndex("WarehouseItemId");

                    b.ToTable("WarehouseItemUnit");
                });

            modelBuilder.Entity("TSDC.Core.Domain.Warehouse.WarehouseLimit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("MaxQuantity")
                        .HasColumnType("float");

                    b.Property<double>("MinQuantity")
                        .HasColumnType("float");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<string>("UnitName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UnitId");

                    b.HasIndex("WarehouseId");

                    b.HasIndex("WarehouseItemId");

                    b.ToTable("WarehouseLimit");
                });

            modelBuilder.Entity("TSDC.Core.Domain.Warehouse.BeginningWarehouse", b =>
                {
                    b.HasOne("TSDC.Core.Domain.Warehouse.Unit", "Unit")
                        .WithMany("BeginningWarehouses")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TSDC.Core.Domain.Warehouse.Warehouse", "Warehouse")
                        .WithMany("BeginningWarehouses")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TSDC.Core.Domain.Warehouse.WarehouseItem", "WarehouseItem")
                        .WithMany("BeginningWarehouses")
                        .HasForeignKey("WarehouseItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unit");

                    b.Navigation("Warehouse");

                    b.Navigation("WarehouseItem");
                });

            modelBuilder.Entity("TSDC.Core.Domain.Warehouse.WarehouseBalance", b =>
                {
                    b.HasOne("TSDC.Core.Domain.Warehouse.Warehouse", "Warehouse")
                        .WithMany("WarehouseBalances")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TSDC.Core.Domain.Warehouse.WarehouseItem", "WarehouseItem")
                        .WithMany("WarehouseBalances")
                        .HasForeignKey("WarehouseItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Warehouse");

                    b.Navigation("WarehouseItem");
                });

            modelBuilder.Entity("TSDC.Core.Domain.Warehouse.WarehouseItem", b =>
                {
                    b.HasOne("TSDC.Core.Domain.Warehouse.Unit", "Unit")
                        .WithMany("WarehouseItems")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TSDC.Core.Domain.Warehouse.Vendor", "Vendor")
                        .WithMany("WarehouseItems")
                        .HasForeignKey("VendorId");

                    b.HasOne("TSDC.Core.Domain.Warehouse.WarehouseItemCategory", "WarehouseItemCategory")
                        .WithMany("WarehouseItems")
                        .HasForeignKey("WarehouseItemCategoryId");

                    b.Navigation("Unit");

                    b.Navigation("Vendor");

                    b.Navigation("WarehouseItemCategory");
                });

            modelBuilder.Entity("TSDC.Core.Domain.Warehouse.WarehouseItemUnit", b =>
                {
                    b.HasOne("TSDC.Core.Domain.Warehouse.Unit", "Unit")
                        .WithMany("WarehouseItemsUnits")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TSDC.Core.Domain.Warehouse.WarehouseItem", "WarehouseItem")
                        .WithMany("WarehouseItemsUnits")
                        .HasForeignKey("WarehouseItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unit");

                    b.Navigation("WarehouseItem");
                });

            modelBuilder.Entity("TSDC.Core.Domain.Warehouse.WarehouseLimit", b =>
                {
                    b.HasOne("TSDC.Core.Domain.Warehouse.Unit", "Unit")
                        .WithMany("WarehouseLimits")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TSDC.Core.Domain.Warehouse.Warehouse", "Warehouse")
                        .WithMany("WarehouseLimits")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TSDC.Core.Domain.Warehouse.WarehouseItem", "WarehouseItem")
                        .WithMany("WarehouseLimits")
                        .HasForeignKey("WarehouseItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unit");

                    b.Navigation("Warehouse");

                    b.Navigation("WarehouseItem");
                });

            modelBuilder.Entity("TSDC.Core.Domain.Warehouse.Unit", b =>
                {
                    b.Navigation("BeginningWarehouses");

                    b.Navigation("WarehouseItems");

                    b.Navigation("WarehouseItemsUnits");

                    b.Navigation("WarehouseLimits");
                });

            modelBuilder.Entity("TSDC.Core.Domain.Warehouse.Vendor", b =>
                {
                    b.Navigation("WarehouseItems");
                });

            modelBuilder.Entity("TSDC.Core.Domain.Warehouse.Warehouse", b =>
                {
                    b.Navigation("BeginningWarehouses");

                    b.Navigation("WarehouseBalances");

                    b.Navigation("WarehouseLimits");
                });

            modelBuilder.Entity("TSDC.Core.Domain.Warehouse.WarehouseItem", b =>
                {
                    b.Navigation("BeginningWarehouses");

                    b.Navigation("WarehouseBalances");

                    b.Navigation("WarehouseItemsUnits");

                    b.Navigation("WarehouseLimits");
                });

            modelBuilder.Entity("TSDC.Core.Domain.Warehouse.WarehouseItemCategory", b =>
                {
                    b.Navigation("WarehouseItems");
                });
#pragma warning restore 612, 618
        }
    }
}
